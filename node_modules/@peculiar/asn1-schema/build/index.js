/**
 * Copyright (c) 2020, Peculiar Ventures, All rights reserved.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var asn1 = require('asn1js');

const AsnAnyConverter = {
    fromASN: (value) => value instanceof asn1.Null ? null : value.valueBeforeDecode,
    toASN: (value) => {
        if (value === null) {
            return new asn1.Null();
        }
        const schema = asn1.fromBER(value);
        if (schema.result.error) {
            throw new Error(schema.result.error);
        }
        return schema.result;
    },
};
const AsnIntegerConverter = {
    fromASN: (value) => !value.valueBlock.valueDec && value.valueBlock.valueHex.byteLength > 0 ?
        value.valueBlock.toString()
        : value.valueBlock.valueDec,
    toASN: (value) => new asn1.Integer({ value }),
};
const AsnEnumeratedConverter = {
    fromASN: (value) => value.valueBlock.valueDec,
    toASN: (value) => new asn1.Enumerated({ value }),
};
const AsnIntegerArrayBufferConverter = {
    fromASN: (value) => value.valueBlock.valueHex,
    toASN: (value) => new asn1.Integer({ valueHex: value }),
};
const AsnBitStringConverter = {
    fromASN: (value) => value.valueBlock.valueHex,
    toASN: (value) => new asn1.BitString({ valueHex: value }),
};
const AsnObjectIdentifierConverter = {
    fromASN: (value) => value.valueBlock.toString(),
    toASN: (value) => new asn1.ObjectIdentifier({ value }),
};
const AsnBooleanConverter = {
    fromASN: (value) => value.valueBlock.value,
    toASN: (value) => new asn1.Boolean({ value }),
};
const AsnOctetStringConverter = {
    fromASN: (value) => value.valueBlock.valueHex,
    toASN: (value) => new asn1.OctetString({ valueHex: value }),
};
function createStringConverter(Asn1Type) {
    return {
        fromASN: (value) => value.valueBlock.value,
        toASN: (value) => new Asn1Type({ value }),
    };
}
const AsnUtf8StringConverter = createStringConverter(asn1.Utf8String);
const AsnBmpStringConverter = createStringConverter(asn1.BmpString);
const AsnUniversalStringConverter = createStringConverter(asn1.UniversalString);
const AsnNumericStringConverter = createStringConverter(asn1.NumericString);
const AsnPrintableStringConverter = createStringConverter(asn1.PrintableString);
const AsnTeletexStringConverter = createStringConverter(asn1.TeletexString);
const AsnVideotexStringConverter = createStringConverter(asn1.VideotexString);
const AsnIA5StringConverter = createStringConverter(asn1.IA5String);
const AsnGraphicStringConverter = createStringConverter(asn1.GraphicString);
const AsnVisibleStringConverter = createStringConverter(asn1.VisibleString);
const AsnGeneralStringConverter = createStringConverter(asn1.GeneralString);
const AsnCharacterStringConverter = createStringConverter(asn1.CharacterString);
const AsnUTCTimeConverter = {
    fromASN: (value) => value.toDate(),
    toASN: (value) => new asn1.UTCTime({ valueDate: value }),
};
const AsnGeneralizedTimeConverter = {
    fromASN: (value) => value.toDate(),
    toASN: (value) => new asn1.GeneralizedTime({ valueDate: value }),
};
const AsnNullConverter = {
    fromASN: (value) => null,
    toASN: (value) => {
        return new asn1.Null();
    },
};

var defaultConverters = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AsnAnyConverter: AsnAnyConverter,
  AsnIntegerConverter: AsnIntegerConverter,
  AsnEnumeratedConverter: AsnEnumeratedConverter,
  AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter,
  AsnBitStringConverter: AsnBitStringConverter,
  AsnObjectIdentifierConverter: AsnObjectIdentifierConverter,
  AsnBooleanConverter: AsnBooleanConverter,
  AsnOctetStringConverter: AsnOctetStringConverter,
  AsnUtf8StringConverter: AsnUtf8StringConverter,
  AsnBmpStringConverter: AsnBmpStringConverter,
  AsnUniversalStringConverter: AsnUniversalStringConverter,
  AsnNumericStringConverter: AsnNumericStringConverter,
  AsnPrintableStringConverter: AsnPrintableStringConverter,
  AsnTeletexStringConverter: AsnTeletexStringConverter,
  AsnVideotexStringConverter: AsnVideotexStringConverter,
  AsnIA5StringConverter: AsnIA5StringConverter,
  AsnGraphicStringConverter: AsnGraphicStringConverter,
  AsnVisibleStringConverter: AsnVisibleStringConverter,
  AsnGeneralStringConverter: AsnGeneralStringConverter,
  AsnCharacterStringConverter: AsnCharacterStringConverter,
  AsnUTCTimeConverter: AsnUTCTimeConverter,
  AsnGeneralizedTimeConverter: AsnGeneralizedTimeConverter,
  AsnNullConverter: AsnNullConverter
});

(function (AsnTypeTypes) {
    AsnTypeTypes[AsnTypeTypes["Sequence"] = 0] = "Sequence";
    AsnTypeTypes[AsnTypeTypes["Set"] = 1] = "Set";
    AsnTypeTypes[AsnTypeTypes["Choice"] = 2] = "Choice";
})(exports.AsnTypeTypes || (exports.AsnTypeTypes = {}));
(function (AsnPropTypes) {
    AsnPropTypes[AsnPropTypes["Any"] = 0] = "Any";
    AsnPropTypes[AsnPropTypes["Boolean"] = 1] = "Boolean";
    AsnPropTypes[AsnPropTypes["OctetString"] = 2] = "OctetString";
    AsnPropTypes[AsnPropTypes["BitString"] = 3] = "BitString";
    AsnPropTypes[AsnPropTypes["Integer"] = 4] = "Integer";
    AsnPropTypes[AsnPropTypes["Enumerated"] = 5] = "Enumerated";
    AsnPropTypes[AsnPropTypes["ObjectIdentifier"] = 6] = "ObjectIdentifier";
    AsnPropTypes[AsnPropTypes["Utf8String"] = 7] = "Utf8String";
    AsnPropTypes[AsnPropTypes["BmpString"] = 8] = "BmpString";
    AsnPropTypes[AsnPropTypes["UniversalString"] = 9] = "UniversalString";
    AsnPropTypes[AsnPropTypes["NumericString"] = 10] = "NumericString";
    AsnPropTypes[AsnPropTypes["PrintableString"] = 11] = "PrintableString";
    AsnPropTypes[AsnPropTypes["TeletexString"] = 12] = "TeletexString";
    AsnPropTypes[AsnPropTypes["VideotexString"] = 13] = "VideotexString";
    AsnPropTypes[AsnPropTypes["IA5String"] = 14] = "IA5String";
    AsnPropTypes[AsnPropTypes["GraphicString"] = 15] = "GraphicString";
    AsnPropTypes[AsnPropTypes["VisibleString"] = 16] = "VisibleString";
    AsnPropTypes[AsnPropTypes["GeneralString"] = 17] = "GeneralString";
    AsnPropTypes[AsnPropTypes["CharacterString"] = 18] = "CharacterString";
    AsnPropTypes[AsnPropTypes["UTCTime"] = 19] = "UTCTime";
    AsnPropTypes[AsnPropTypes["GeneralizedTime"] = 20] = "GeneralizedTime";
    AsnPropTypes[AsnPropTypes["DATE"] = 21] = "DATE";
    AsnPropTypes[AsnPropTypes["TimeOfDay"] = 22] = "TimeOfDay";
    AsnPropTypes[AsnPropTypes["DateTime"] = 23] = "DateTime";
    AsnPropTypes[AsnPropTypes["Duration"] = 24] = "Duration";
    AsnPropTypes[AsnPropTypes["TIME"] = 25] = "TIME";
    AsnPropTypes[AsnPropTypes["Null"] = 26] = "Null";
})(exports.AsnPropTypes || (exports.AsnPropTypes = {}));

class AsnSchemaStorage {
    constructor() {
        this.items = new Map();
    }
    has(target) {
        return this.items.has(target);
    }
    get(target) {
        const schema = this.items.get(target);
        if (!schema) {
            throw new Error("Cannot get schema for current target");
        }
        return schema;
    }
    cache(target) {
        const schema = this.get(target);
        if (!schema.schema) {
            schema.schema = this.create(target, true);
        }
    }
    createDefault(target) {
        const schema = {
            type: exports.AsnTypeTypes.Sequence,
            items: {},
        };
        const parentSchema = this.findParentSchema(target);
        if (parentSchema) {
            Object.assign(schema, parentSchema);
            schema.items = Object.assign({}, schema.items, parentSchema.items);
        }
        return schema;
    }
    create(target, useNames) {
        const schema = this.items.get(target) || this.createDefault(target);
        const asn1Value = [];
        for (const key in schema.items) {
            const item = schema.items[key];
            const name = useNames ? key : "";
            let asn1Item;
            if (typeof (item.type) === "number") {
                const Asn1TypeName = exports.AsnPropTypes[item.type];
                const Asn1Type = asn1[Asn1TypeName];
                if (!Asn1Type) {
                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);
                }
                asn1Item = new Asn1Type({ name });
            }
            else {
                asn1Item = new asn1.Any({ name });
            }
            const optional = !!item.optional || item.defaultValue !== undefined;
            if (item.repeated) {
                if (typeof item.repeated === "boolean") {
                    asn1Item.name = "";
                    asn1Item = new asn1.Repeated({
                        name,
                        value: asn1Item,
                    });
                }
                else {
                    asn1Item.name = "";
                    const Container = item.repeated === "set"
                        ? asn1.Set
                        : asn1.Sequence;
                    asn1Item = new Container({
                        name: "",
                        value: [
                            new asn1.Repeated({
                                name,
                                value: asn1Item,
                            }),
                        ],
                    });
                }
            }
            if (item.context !== null && item.context !== undefined) {
                if (item.implicit) {
                    if (typeof item.type === "number") {
                        const Container = item.repeated
                            ? asn1.Constructed
                            : asn1.Primitive;
                        asn1Value.push(new Container({
                            name,
                            optional,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: item.context,
                            },
                        }));
                    }
                    else {
                        this.cache(item.type);
                        const isRepeatedString = typeof item.repeated === "string";
                        const value = !isRepeatedString
                            ? this.get(item.type).schema.valueBlock.value
                            : asn1Item.valueBlock.value;
                        asn1Value.push(new asn1.Constructed({
                            name: !isRepeatedString ? name : "",
                            optional,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: item.context,
                            },
                            value,
                        }));
                    }
                }
                else {
                    asn1Value.push(new asn1.Constructed({
                        optional,
                        idBlock: {
                            tagClass: 3,
                            tagNumber: item.context,
                        },
                        value: [asn1Item],
                    }));
                }
            }
            else {
                asn1Item.optional = optional;
                asn1Value.push(asn1Item);
            }
        }
        switch (schema.type) {
            case exports.AsnTypeTypes.Sequence:
                return new asn1.Sequence({ value: asn1Value, name: "" });
            case exports.AsnTypeTypes.Set:
                return new asn1.Set({ value: asn1Value, name: "" });
            case exports.AsnTypeTypes.Choice:
                return new asn1.Choice({ value: asn1Value, name: "" });
            default:
                throw new Error(`Unsupported ASN1 type in use`);
        }
    }
    set(target, schema) {
        this.items.set(target, schema);
        return this;
    }
    findParentSchema(target) {
        const parent = target.__proto__;
        if (parent) {
            const schema = this.items.get(parent);
            return schema || this.findParentSchema(parent);
        }
        return null;
    }
}

const schemaStorage = new AsnSchemaStorage();

const AsnType = (options) => (target) => {
    const schema = schemaStorage.get(target);
    Object.assign(schema, options);
};
const AsnProp = (options) => (target, propertyKey) => {
    let schema;
    if (!schemaStorage.has(target.constructor)) {
        schema = schemaStorage.createDefault(target.constructor);
        schemaStorage.set(target.constructor, schema);
    }
    else {
        schema = schemaStorage.get(target.constructor);
    }
    const copyOptions = Object.assign({}, options);
    if (typeof copyOptions.type === "number" && !copyOptions.converter) {
        const converterName = `Asn${exports.AsnPropTypes[options.type]}Converter`;
        const defaultConverter = defaultConverters[converterName];
        if (!defaultConverter) {
            throw new Error(`Cannot get '${converterName}' for property '${propertyKey}' of ${target.constructor.name}`);
        }
        copyOptions.converter = defaultConverter;
    }
    schema.items[propertyKey] = copyOptions;
};

class AsnSchemaValidationError extends Error {
    constructor() {
        super(...arguments);
        this.schemas = [];
    }
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AsnSchemaValidationError: AsnSchemaValidationError
});

function isConvertible(target) {
    if (target && target.prototype) {
        if (target.prototype.toASN && target.prototype.fromASN) {
            return true;
        }
        else {
            return isConvertible(target.prototype);
        }
    }
    else {
        return !!(target && target.toASN && target.fromASN);
    }
}

class AsnParser {
    static parse(data, target) {
        let buf;
        if (data instanceof ArrayBuffer) {
            buf = data;
        }
        else if (typeof Buffer !== undefined && Buffer.isBuffer(data)) {
            buf = new Uint8Array(data).buffer;
        }
        else if (ArrayBuffer.isView(data)) {
            buf = data.buffer;
        }
        else {
            throw new TypeError("Wrong type of 'data' argument");
        }
        const asn1Parsed = asn1.fromBER(buf);
        if (asn1Parsed.result.error) {
            throw new Error(asn1Parsed.result.error);
        }
        const res = this.fromASN(asn1Parsed.result, target);
        return res;
    }
    static fromASN(asn1Schema, target) {
        try {
            if (isConvertible(target)) {
                const value = new target();
                return value.fromASN(asn1Schema);
            }
            const schema = schemaStorage.get(target);
            schemaStorage.cache(target);
            let targetSchema = schema.schema;
            if (asn1Schema.constructor === asn1.Constructed && schema.type !== exports.AsnTypeTypes.Choice) {
                targetSchema = new asn1.Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: asn1Schema.idBlock.tagNumber,
                    },
                    value: schema.schema.valueBlock.value,
                });
                for (const key in schema.items) {
                    delete asn1Schema[key];
                }
            }
            const asn1ComparedSchema = asn1.compareSchema(asn1Schema, asn1Schema, targetSchema);
            if (!asn1ComparedSchema.verified) {
                throw new AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);
            }
            const res = new target();
            for (const key in schema.items) {
                if (!asn1Schema[key]) {
                    continue;
                }
                const schemaItem = schema.items[key];
                if (typeof (schemaItem.type) === "number") {
                    const converter = schemaItem.converter;
                    if (!converter) {
                        throw new Error("Converter is empty");
                    }
                    if (schemaItem.repeated) {
                        if (schemaItem.implicit && typeof schemaItem.repeated === "string") {
                            const Container = schemaItem.repeated === "sequence"
                                ? asn1.Sequence
                                : asn1.Set;
                            const newItem = new Container();
                            newItem.valueBlock = asn1Schema[key].valueBlock;
                            const value = asn1.fromBER(newItem.toBER(false)).result.valueBlock.value;
                            res[key] = Array.from(value, (element) => converter.fromASN(element));
                        }
                        else {
                            res[key] = Array.from(asn1Schema[key], (element) => converter.fromASN(element));
                        }
                    }
                    else {
                        let value = asn1Schema[key];
                        if (schemaItem.implicit) {
                            const Asn1TypeName = exports.AsnPropTypes[schemaItem.type];
                            const Asn1Type = asn1[Asn1TypeName];
                            if (!Asn1Type) {
                                throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);
                            }
                            const newItem = new Asn1Type();
                            newItem.valueBlock = value.valueBlock;
                            value = asn1.fromBER(newItem.toBER(false)).result;
                        }
                        res[key] = converter.fromASN(value);
                    }
                }
                else {
                    if (schemaItem.repeated) {
                        res[key] = Array.from(asn1Schema[key], (element) => this.fromASN(element, schemaItem.type));
                    }
                    else {
                        res[key] = this.fromASN(asn1Schema[key], schemaItem.type);
                    }
                }
            }
            return res;
        }
        catch (error) {
            if (error instanceof AsnSchemaValidationError) {
                error.schemas.push(target.name);
            }
            throw error;
        }
    }
}

class AsnSerializer {
    static serialize(obj) {
        return this.toASN(obj).toBER(false);
    }
    static toASN(obj) {
        if (obj && isConvertible(obj.constructor)) {
            return obj.toASN();
        }
        const target = obj.constructor;
        const schema = schemaStorage.get(target);
        schemaStorage.cache(target);
        let asn1Value = [];
        for (const key in schema.items) {
            const item = schema.items[key];
            const objProp = obj[key];
            if (objProp === undefined || item.defaultValue === objProp) {
                continue;
            }
            let asn1Item;
            if (typeof (item.type) === "number") {
                const converter = item.converter;
                if (!converter) {
                    throw new Error(`Property '${key}' doesn't have converter for type ${exports.AsnPropTypes[item.type]} in schema '${target.name}'`);
                }
                if (item.repeated) {
                    const items = Array.from(objProp, (element) => converter.toASN(element));
                    if (typeof item.repeated === "boolean") {
                        asn1Item = items;
                    }
                    else {
                        const Container = item.repeated === "sequence"
                            ? asn1.Sequence
                            : asn1.Set;
                        asn1Item = new Container({
                            value: items,
                        });
                    }
                }
                else {
                    asn1Item = converter.toASN(objProp);
                }
            }
            else {
                if (item.repeated) {
                    const items = Array.from(objProp, (element) => this.toASN(element));
                    if (typeof item.repeated === "boolean") {
                        asn1Item = items;
                    }
                    else {
                        const Container = item.repeated === "sequence"
                            ? asn1.Sequence
                            : asn1.Set;
                        asn1Item = new Container({
                            value: items,
                        });
                    }
                }
                else {
                    asn1Item = this.toASN(objProp);
                }
            }
            if (item.context !== null && item.context !== undefined) {
                if (item.implicit) {
                    if (!item.repeated && typeof item.type === "number") {
                        const value = {};
                        value.valueHex = asn1Item.valueBlock.toBER();
                        asn1Value.push(new asn1.Primitive(Object.assign({ optional: item.optional, idBlock: {
                                tagClass: 3,
                                tagNumber: item.context,
                            } }, value)));
                    }
                    else {
                        asn1Value.push(new asn1.Constructed({
                            optional: item.optional,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: item.context,
                            },
                            value: asn1Item.valueBlock.value,
                        }));
                    }
                }
                else {
                    asn1Value.push(new asn1.Constructed({
                        optional: item.optional,
                        idBlock: {
                            tagClass: 3,
                            tagNumber: item.context,
                        },
                        value: [asn1Item],
                    }));
                }
            }
            else if (item.repeated) {
                asn1Value = asn1Value.concat(asn1Item);
            }
            else {
                asn1Value.push(asn1Item);
            }
        }
        let asnSchema;
        switch (schema.type) {
            case exports.AsnTypeTypes.Sequence:
                asnSchema = new asn1.Sequence({ value: asn1Value });
                break;
            case exports.AsnTypeTypes.Set:
                asnSchema = new asn1.Set({ value: asn1Value });
                break;
            case exports.AsnTypeTypes.Choice:
                if (!asn1Value[0]) {
                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);
                }
                asnSchema = asn1Value[0];
                break;
        }
        return asnSchema;
    }
}

exports.AsnAnyConverter = AsnAnyConverter;
exports.AsnBitStringConverter = AsnBitStringConverter;
exports.AsnBmpStringConverter = AsnBmpStringConverter;
exports.AsnBooleanConverter = AsnBooleanConverter;
exports.AsnCharacterStringConverter = AsnCharacterStringConverter;
exports.AsnEnumeratedConverter = AsnEnumeratedConverter;
exports.AsnGeneralStringConverter = AsnGeneralStringConverter;
exports.AsnGeneralizedTimeConverter = AsnGeneralizedTimeConverter;
exports.AsnGraphicStringConverter = AsnGraphicStringConverter;
exports.AsnIA5StringConverter = AsnIA5StringConverter;
exports.AsnIntegerArrayBufferConverter = AsnIntegerArrayBufferConverter;
exports.AsnIntegerConverter = AsnIntegerConverter;
exports.AsnNullConverter = AsnNullConverter;
exports.AsnNumericStringConverter = AsnNumericStringConverter;
exports.AsnObjectIdentifierConverter = AsnObjectIdentifierConverter;
exports.AsnOctetStringConverter = AsnOctetStringConverter;
exports.AsnParser = AsnParser;
exports.AsnPrintableStringConverter = AsnPrintableStringConverter;
exports.AsnProp = AsnProp;
exports.AsnSerializer = AsnSerializer;
exports.AsnTeletexStringConverter = AsnTeletexStringConverter;
exports.AsnType = AsnType;
exports.AsnUTCTimeConverter = AsnUTCTimeConverter;
exports.AsnUniversalStringConverter = AsnUniversalStringConverter;
exports.AsnUtf8StringConverter = AsnUtf8StringConverter;
exports.AsnVideotexStringConverter = AsnVideotexStringConverter;
exports.AsnVisibleStringConverter = AsnVisibleStringConverter;
exports.errors = index;
